<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凌云的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shifeiqi.top/"/>
  <updated>2019-05-12T12:38:58.694Z</updated>
  <id>http://www.shifeiqi.top/</id>
  
  <author>
    <name>凌云</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>枚举对象属性</title>
    <link href="http://www.shifeiqi.top/2019/05/12/2019-05-12-enumerate_properties/"/>
    <id>http://www.shifeiqi.top/2019/05/12/2019-05-12-enumerate_properties/</id>
    <published>2019-05-12T09:09:00.000Z</published>
    <updated>2019-05-12T12:38:58.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1. 写在前面"></a>1. 写在前面</h3><p>在日常开发，尤其是类库的开发过程中，遍历对象属性是一项经常使用的操作。<br>本文将介绍如何<em>遍历对象自身可枚举属性</em>、<em>遍历对象自身全部属性</em>、<em>遍历对象可枚举属性</em>、<em>遍历对象全部属性</em> 四方面的内容。</p><h3 id="2-遍历对象自身可枚举属性"><a href="#2-遍历对象自身可枚举属性" class="headerlink" title="2. 遍历对象自身可枚举属性"></a>2. 遍历对象自身可枚举属性</h3><h4 id="2-1-使用接口-Object-keys-obj"><a href="#2-1-使用接口-Object-keys-obj" class="headerlink" title="2.1. 使用接口 Object.keys(obj)"></a>2.1. 使用接口 <code>Object.keys(obj)</code></h4><p>JavaScript 提供内置接口 <code>Object.keys(obj)</code> 用来获取对象自身的（非继承）、可枚举的属性名称集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  b : <span class="string">'bran'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象自身可枚举属性，并遍历打印</span></span><br><span class="line"><span class="built_in">Object</span>.keys(o).forEach(<span class="function"><span class="params">key</span> =&gt;</span> <span class="built_in">console</span>.log(key, o[key]));</span><br></pre></td></tr></table></figure><p>详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object​.keys()</a> 。</p><h4 id="2-2-使用接口-Object-values-obj"><a href="#2-2-使用接口-Object-values-obj" class="headerlink" title="2.2. 使用接口 Object.values(obj)"></a>2.2. 使用接口 <code>Object.values(obj)</code></h4><p>JavaScript 提供内置接口 <code>Object.values(obj)</code> 用来获取对象自身的（非继承）、可枚举的属性值集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  b : <span class="string">'bran'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象自身可枚举属性值集合</span></span><br><span class="line"><span class="built_in">Object</span>.values(o).forEach(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val));</span><br></pre></td></tr></table></figure><p>详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values" target="_blank" rel="noopener">Object​.values()</a>。</p><h4 id="2-3-使用接口-Object-entries"><a href="#2-3-使用接口-Object-entries" class="headerlink" title="2.3. 使用接口 Object.entries()"></a>2.3. 使用接口 <code>Object.entries()</code></h4><p>JavaScript 提供内置接口 <code>Object.entries(obj)</code> 用来获取对象自身的（非继承）、可枚举的键值对集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  b : <span class="string">'bran'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象自身可枚举属性的键值对集合</span></span><br><span class="line"><span class="built_in">Object</span>.entries(o).forEach(<span class="function"><span class="params">entry</span> =&gt;</span> <span class="built_in">console</span>.log(entry[<span class="number">0</span>], entry[<span class="number">1</span>]));</span><br></pre></td></tr></table></figure><p>详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener">Object​.entries()</a>；</p><h4 id="2-4-使用接口-Object-getOwnPropertyNames-obj-和-Object​-prototype​-property​IsEnumerable"><a href="#2-4-使用接口-Object-getOwnPropertyNames-obj-和-Object​-prototype​-property​IsEnumerable" class="headerlink" title="2.4. 使用接口 Object.getOwnPropertyNames(obj) 和 Object​.prototype​.property​IsEnumerable()"></a>2.4. 使用接口 <code>Object.getOwnPropertyNames(obj)</code> 和 <code>Object​.prototype​.property​IsEnumerable()</code></h4><p>接口 <code>Object.getOwnPropertyNames(obj)</code> 用于获取对象自身（非继承）所有的（可枚举和不可枚举）属性名称集合。<br>接口 <code>Object​.prototype​.property​IsEnumerable()</code> 用于判断对象自身（非继承）的某个属性是否为可枚举。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  b : <span class="string">'bran'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 为对象定义一个不可枚举属性 c</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'c'</span>, &#123;</span><br><span class="line">  configurable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">false</span>,</span><br><span class="line">  value : <span class="string">'sophia'</span>,</span><br><span class="line">  writable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历对象自身所有属性</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(o).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将对象自身可枚举属性打印出来</span></span><br><span class="line">  o.propertyIsEnumerable(name) &amp;&amp; <span class="built_in">console</span>.log(name, o[name]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames" target="_blank" rel="noopener">Object​.get​OwnProperty​Names()</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable" target="_blank" rel="noopener">Object​.prototype​.property​IsEnumerable()</a>。</p><h4 id="2-5-使用-for-in-和-接口-Object​-prototype​-has​OwnProperty"><a href="#2-5-使用-for-in-和-接口-Object​-prototype​-has​OwnProperty" class="headerlink" title="2.5. 使用 for...in 和 接口 Object​.prototype​.has​OwnProperty()"></a>2.5. 使用 <code>for...in</code> 和 接口 <code>Object​.prototype​.has​OwnProperty()</code></h4><p><code>for...in</code> 用于遍历对象所有的（自身及继承）、可枚举的属性集合。<br>接口 <code>Object​.prototype​.has​OwnProperty()</code> 用于判断对象自身（非继承）是否拥有某个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  b : <span class="string">'bran'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 为对象定义一个不可枚举属性 c</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'c'</span>, &#123;</span><br><span class="line">  configurable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">false</span>,</span><br><span class="line">  value : <span class="string">'sophia'</span>,</span><br><span class="line">  writable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key;</span><br><span class="line"><span class="comment">// 遍历对象所有可枚举属性</span></span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> o) &#123;</span><br><span class="line">  <span class="comment">// 将对象自身的属性打印出来</span></span><br><span class="line">  o.hasOwnProperty(key) &amp;&amp; <span class="built_in">console</span>.log(key, o[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noopener">for…in</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" target="_blank" rel="noopener">Object​.prototype​.has​OwnProperty()</a>。</p><h3 id="3-遍历对象自身所有属性"><a href="#3-遍历对象自身所有属性" class="headerlink" title="3. 遍历对象自身所有属性"></a>3. 遍历对象自身所有属性</h3><p>遍历对象自身（非继承）所有属性主要使用JavaScript内置接口 <code>Object.getOwnPropertyNames(obj)</code>。<br>接口 <code>Object.getOwnPropertyNames(obj)</code> 用于获取对象自身所有的（可枚举和不可枚举）属性名称集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  b : <span class="string">'bran'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 为对象定义一个不可枚举属性 c</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'c'</span>, &#123;</span><br><span class="line">  configurable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">false</span>,</span><br><span class="line">  value : <span class="string">'sophia'</span>,</span><br><span class="line">  writable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历对象自身所有属性，并将其打印出来</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(o).forEach(<span class="function"><span class="params">key</span> =&gt;</span> <span class="built_in">console</span>.log(key, o[key]));</span><br></pre></td></tr></table></figure><p>详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames" target="_blank" rel="noopener">Object​.get​OwnProperty​Names()</a>。</p><h3 id="4-遍历对象所有可枚举属性（自身和继承）"><a href="#4-遍历对象所有可枚举属性（自身和继承）" class="headerlink" title="4. 遍历对象所有可枚举属性（自身和继承）"></a>4. 遍历对象所有可枚举属性（自身和继承）</h3><h4 id="4-1-使用-for-in"><a href="#4-1-使用-for-in" class="headerlink" title="4.1. 使用 for...in"></a>4.1. 使用 <code>for...in</code></h4><p>JavaScript中使用 <code>for..in</code> 来遍历对象所有的可枚举属性（自身和继承）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  b : <span class="string">'bran'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 为对象定义一个不可枚举属性 c</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'c'</span>, &#123;</span><br><span class="line">  configurable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">false</span>,</span><br><span class="line">  value : <span class="string">'sophia'</span>,</span><br><span class="line">  writable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历对象所有可枚举属性</span></span><br><span class="line"><span class="keyword">var</span> key;</span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> o)</span><br><span class="line">  <span class="built_in">console</span>.log(key, o[key]);</span><br></pre></td></tr></table></figure><p>详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noopener">for…in</a>。</p><h4 id="4-2-通过遍历原型链的方式"><a href="#4-2-通过遍历原型链的方式" class="headerlink" title="4.2. 通过遍历原型链的方式"></a>4.2. 通过遍历原型链的方式</h4><p>通过遍历原型链，然后在每一个原型对象上获取可枚举属性的方式来获取对象所有的可枚举属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  b : <span class="string">'bran'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 为对象定义一个不可枚举属性 c</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'c'</span>, &#123;</span><br><span class="line">  configurable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">false</span>,</span><br><span class="line">  value : <span class="string">'sophia'</span>,</span><br><span class="line">  writable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentObj = o;</span><br><span class="line"><span class="keyword">while</span>(currentObj) &#123;</span><br><span class="line">  <span class="comment">// 遍历原型链上当前对象自身可枚举属性</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(currentObj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> <span class="built_in">console</span>.log(key, currentObj[key]));</span><br><span class="line">  <span class="comment">// 迭代原型</span></span><br><span class="line">  currentObj = <span class="built_in">Object</span>.getPrototypeOf(currentObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf" target="_blank" rel="noopener">Object​.get​PrototypeOf()</a>。</p><h3 id="5-遍历对象所有属性"><a href="#5-遍历对象所有属性" class="headerlink" title="5. 遍历对象所有属性"></a>5. 遍历对象所有属性</h3><p>通过遍历原型链，然后在每一个原型对象上获取当前原型对象所有属性的方式来获取对象所有的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  b : <span class="string">'bran'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 为对象定义一个不可枚举属性 c</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'c'</span>, &#123;</span><br><span class="line">  configurable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">false</span>,</span><br><span class="line">  value : <span class="string">'sophia'</span>,</span><br><span class="line">  writable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentObj = o;</span><br><span class="line"><span class="keyword">while</span>(currentObj) &#123;</span><br><span class="line">  <span class="comment">// 遍历原型链上当前对象所有属性</span></span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyNames(currentObj).forEach(<span class="function"><span class="params">propName</span> =&gt;</span> <span class="built_in">console</span>.log(propName, currentObj[propName]));</span><br><span class="line">  <span class="comment">// 迭代原型</span></span><br><span class="line">  currentObj = <span class="built_in">Object</span>.getPrototypeOf(currentObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf" target="_blank" rel="noopener">Object​.get​PrototypeOf()</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-写在前面&quot;&gt;&lt;a href=&quot;#1-写在前面&quot; class=&quot;headerlink&quot; title=&quot;1. 写在前面&quot;&gt;&lt;/a&gt;1. 写在前面&lt;/h3&gt;&lt;p&gt;在日常开发，尤其是类库的开发过程中，遍历对象属性是一项经常使用的操作。&lt;br&gt;本文将介绍如何&lt;em&gt;遍历
      
    
    </summary>
    
      <category term="2019" scheme="http://www.shifeiqi.top/categories/2019/"/>
    
    
      <category term="ECMA" scheme="http://www.shifeiqi.top/tags/ECMA/"/>
    
      <category term="ECMAScript" scheme="http://www.shifeiqi.top/tags/ECMAScript/"/>
    
      <category term="JavaScript" scheme="http://www.shifeiqi.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>属性描述符</title>
    <link href="http://www.shifeiqi.top/2019/05/08/2019-05-08-property_descriptors/"/>
    <id>http://www.shifeiqi.top/2019/05/08/2019-05-08-property_descriptors/</id>
    <published>2019-05-08T07:35:00.000Z</published>
    <updated>2019-05-12T10:31:38.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-属性描述符简介"><a href="#1-属性描述符简介" class="headerlink" title="1. 属性描述符简介"></a>1. 属性描述符简介</h3><h4 id="1-1-什么是属性描述符"><a href="#1-1-什么是属性描述符" class="headerlink" title="1.1. 什么是属性描述符"></a>1.1. 什么是属性描述符</h4><p>属性描述符(property descriptor)是JavaScript提供的内置对象，用来配置<em>JavaScript对象属性</em>，控制<em>JavaScript对象属性</em>的行为（如控制属性是否可配置，是否可枚举，是否可写等等）。<br>属性描述符(property descriptor) 在JavaScript内部表现为一个JavaScript对象，具有明确的键值对。如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个对象 o , 具有属性 a                          // o.a 的属性描述符</span></span><br><span class="line">o : &#123;                                             <span class="comment">// 其中键名 configurable, enumerable, value, writable 是明确的，不可更改的</span></span><br><span class="line">    a : <span class="number">1</span>     &lt;---------------------------------    &#123;</span><br><span class="line">&#125;                                                       configurable ： <span class="literal">true</span>,</span><br><span class="line">                                                        enumerable : <span class="literal">true</span>,</span><br><span class="line">                                                        value : <span class="number">1</span>,</span><br><span class="line">                                                        writable : <span class="literal">true</span></span><br><span class="line">                                                    &#125;</span><br></pre></td></tr></table></figure><p>详见：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Description" target="_blank" rel="noopener">Description</a></p><h4 id="1-2-如何获取属性描述符"><a href="#1-2-如何获取属性描述符" class="headerlink" title="1.2. 如何获取属性描述符"></a>1.2. 如何获取属性描述符</h4><p>JavaScript 提供内置接口 <code>Object.getOwnPropertyDescriptor(obj, prop)</code> 用于获取对象属性的属性描述符。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">'a'</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   configurable: true,</span></span><br><span class="line"><span class="comment">//   enumerable: true,</span></span><br><span class="line"><span class="comment">//   value: 1,</span></span><br><span class="line"><span class="comment">//   writable: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><p>详见： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" target="_blank" rel="noopener">Object​.get​OwnProperty​Descriptor()</a></p><h3 id="2-属性描述符的分类"><a href="#2-属性描述符的分类" class="headerlink" title="2. 属性描述符的分类"></a>2. 属性描述符的分类</h3><p>JavaScript 提供两种属性描述符：数据描述符(data descriptor)和存取描述符(accessor descriptor)。</p><h4 id="2-1-数据描述符-data-descriptor"><a href="#2-1-数据描述符-data-descriptor" class="headerlink" title="2.1 数据描述符(data descriptor)"></a>2.1 数据描述符(data descriptor)</h4><p>数据描述符用来描述属性值以及属性是否可配置、可枚举、可写，数据描述符的表现形式如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个值为 1 的数据描述符示例</span></span><br><span class="line">&#123;</span><br><span class="line">    configurable : <span class="literal">true</span>,</span><br><span class="line">    enumerable : <span class="literal">true</span>,</span><br><span class="line">    value : <span class="number">1</span>,</span><br><span class="line">    writeable : <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，各个键值含义如下：</p><ol><li><p><code>configurable</code>： 表明该属性是否可配置。属性可配置包含但不限于以下情况：  </p><ul><li>该属性是否可用指令<code>delete</code>删除。</li><li>该属性的属性描述符是否可修改，即通过接口 <code>Object.defineProperty(obj, prop, descriptor)</code> 修改属性描述符。</li></ul></li><li><p><code>enumerable</code>： 表明该属性是否可枚举。属性可枚举的情况包含但不限于以下：</p><ul><li>通过接口 <code>Object.keys(obj)</code> 遍历对象自身可枚举属性。</li><li>通过接口 <code>Object.values(obj)</code> 遍历对象自身可枚举属性值。</li><li>通过接口 <code>Object.entries(obj)</code> 遍历对象自身可枚举属性。</li><li>通过 <code>for (variable in object) {...}</code> 遍历对象可枚举属性（自身属性与继承属性）。 </li></ul></li><li><p><code>value</code>： 表明属性的当前值。</p></li><li><p><code>writable</code>：表明属性是否可写。属性可写包含但不限于以下情况：</p><ul><li>通过赋值语句为对象属性赋值，如 <code>o.a = 2;</code> 。</li><li>通过接口 <code>Object.defineProperty(obj, prop, descriptor)</code> 修改数据描述符元属性<code>value</code>。</li></ul></li></ol><h4 id="2-2-为属性定义数据描述符"><a href="#2-2-为属性定义数据描述符" class="headerlink" title="2.2. 为属性定义数据描述符"></a>2.2. 为属性定义数据描述符</h4><p>为对象属性定义数据描述符有两种方式：默认定义、自定义。</p><h5 id="2-2-1-默认定义数据描述符"><a href="#2-2-1-默认定义数据描述符" class="headerlink" title="2.2.1. 默认定义数据描述符"></a>2.2.1. 默认定义数据描述符</h5><p>通过赋值操作为对象添加属性时，JavaScript会为该属性创建一个默认的数据描述符。<br>通过这种方式创建的数据描述符的元属性value值与对象属性值保持一致，其余元属性值都为<code>true</code>，具体表现形式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过赋值操作创建的默认数据描述符</span></span><br><span class="line"><span class="comment">// var o = &#123;&#125;;</span></span><br><span class="line"><span class="comment">// o.a = 1;</span></span><br><span class="line">&#123;</span><br><span class="line">    configurable : <span class="literal">true</span>,</span><br><span class="line">    enumerable : <span class="literal">true</span>,</span><br><span class="line">    value : <span class="number">1</span>,</span><br><span class="line">    writeable : <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个默认数据描述符的示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为对象 o 添加属性 a b c</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a : <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">o.b = <span class="string">'b value'</span>;</span><br><span class="line">o[<span class="string">'c'</span>] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">'a'</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   configurable: true,</span></span><br><span class="line"><span class="comment">//   enumerable: true,</span></span><br><span class="line"><span class="comment">//   value: 1,</span></span><br><span class="line"><span class="comment">//   writable: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">'b'</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   configurable: true,</span></span><br><span class="line"><span class="comment">//   enumerable: true,</span></span><br><span class="line"><span class="comment">//   value: 'b value',</span></span><br><span class="line"><span class="comment">//   writable: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">'c'</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   configurable: true,</span></span><br><span class="line"><span class="comment">//   enumerable: true,</span></span><br><span class="line"><span class="comment">//   value: false,</span></span><br><span class="line"><span class="comment">//   writable: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><h5 id="2-2-2-自定义数据描述符"><a href="#2-2-2-自定义数据描述符" class="headerlink" title="2.2.2. 自定义数据描述符"></a>2.2.2. 自定义数据描述符</h5><p>JavaScript 提供内置接口 <code>Object.defineProperty(obj, prop, descriptor)</code> 用于定义及修改属性描述符。<br>使用该接口创建数据描述符时，若没有指定数据描述符某个元属性值，则这个元属性会取默认值，数据描述符各元属性默认值如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    configurable : <span class="literal">false</span>,</span><br><span class="line">    enumerable : <span class="literal">false</span>,</span><br><span class="line">    value : <span class="literal">undefined</span>,</span><br><span class="line">    writeable : <span class="literal">false</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用接口 <code>Object.defineProperty(obj, prop, descriptor)</code> 定义数据描述符示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义属性 a, 并指定其为不可写属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'a'</span>, &#123;</span><br><span class="line">  configurable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">true</span>,</span><br><span class="line">  value : <span class="number">1</span>,</span><br><span class="line">  writable : <span class="literal">false</span>  <span class="comment">// 不可写</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">'a'</span>);  <span class="comment">// &#123;</span></span><br><span class="line">                                          <span class="comment">//   configurable: true,</span></span><br><span class="line">                                          <span class="comment">//   enumerable: true,</span></span><br><span class="line">                                          <span class="comment">//   value: 1,</span></span><br><span class="line">                                          <span class="comment">//   writable: false</span></span><br><span class="line">                                          <span class="comment">// &#125;</span></span><br><span class="line"> o.a = <span class="number">2</span>;  <span class="comment">// TypeError: Cannot assign to read only property 'a' of object '#&lt;Object&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义属性 b, 数据描述符元数据 value='b-value', writable=true, configurable和enumerable采用默认配置。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'b'</span>, &#123;</span><br><span class="line">  value : <span class="string">'b-value'</span>,</span><br><span class="line">  writable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">'b'</span>);  <span class="comment">// &#123;</span></span><br><span class="line">                                          <span class="comment">//   configurable: false,</span></span><br><span class="line">                                          <span class="comment">//   enumerable: false,</span></span><br><span class="line">                                          <span class="comment">//   value: 'b-value',</span></span><br><span class="line">                                          <span class="comment">//   writable: true</span></span><br><span class="line">                                          <span class="comment">// &#125;</span></span><br><span class="line">o.b = <span class="string">'hi, Sophia'</span>; <span class="comment">// bingo</span></span><br></pre></td></tr></table></figure></p><p>使用接口 <code>Object.defineProperty(obj, prop, descriptor)</code> 修改数据描述符示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义属性 a, 并指定其为不可写属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'a'</span>, &#123;</span><br><span class="line">  configurable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">true</span>,</span><br><span class="line">  value : <span class="number">1</span>,</span><br><span class="line">  writable : <span class="literal">false</span>  <span class="comment">// 不可写</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">'a'</span>);  <span class="comment">// &#123;</span></span><br><span class="line">                                          <span class="comment">//   configurable: true,</span></span><br><span class="line">                                          <span class="comment">//   enumerable: true,</span></span><br><span class="line">                                          <span class="comment">//   value: 1,</span></span><br><span class="line">                                          <span class="comment">//   writable: false</span></span><br><span class="line">                                          <span class="comment">// &#125;</span></span><br><span class="line">o.a = <span class="number">2</span>;  <span class="comment">// TypeError: Cannot assign to read only property 'a' of object '#&lt;Object&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 修改属性 a 的数据描述符，使其变为可写属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'a'</span>, &#123;</span><br><span class="line">  writable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">'a'</span>);  <span class="comment">// &#123;</span></span><br><span class="line">                                          <span class="comment">//   configurable: true,</span></span><br><span class="line">                                          <span class="comment">//   enumerable: true,</span></span><br><span class="line">                                          <span class="comment">//   value: 1,</span></span><br><span class="line">                                          <span class="comment">//   writable: true</span></span><br><span class="line">                                          <span class="comment">// &#125;</span></span><br><span class="line">o.a = <span class="number">2</span>; <span class="comment">// bingo</span></span><br></pre></td></tr></table></figure></p><h4 id="2-3-存取描述符-accessor-descriptor"><a href="#2-3-存取描述符-accessor-descriptor" class="headerlink" title="2.3. 存取描述符(accessor descriptor)"></a>2.3. 存取描述符(accessor descriptor)</h4><p>存取描述符用来描述对象属性是否可配置、可枚举，以及对属性的赋值及取值过程进行控制，存取描述符的一般结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    configurable : <span class="literal">true</span>,</span><br><span class="line">    enumerable : <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">get</span> : function() &#123;</span><br><span class="line">        <span class="comment">// 返回值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> : function(val) &#123;</span><br><span class="line">        <span class="comment">// 赋值之前的逻辑操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，存取描述符的各个元属性含义如下：  </p><ol><li><p><code>configurable</code>： 表明该属性是否可配置。属性可配置包含但不限于以下情况：  </p><ul><li>该属性是否可用指令<code>delete</code>删除。</li><li>该属性的属性描述符是否可修改，即通过接口 <code>Object.defineProperty(obj, prop, descriptor)</code> 修改属性描述符。</li></ul></li><li><p><code>enumerable</code>： 表明该属性是否可枚举。属性可枚举的情况包含但不限于以下：</p><ul><li>通过接口 <code>Object.keys(obj)</code> 遍历对象自身可枚举属性。</li><li>通过接口 <code>Object.values(obj)</code> 遍历对象自身可枚举属性值。</li><li>通过接口 <code>Object.entries(obj)</code> 遍历对象自身可枚举属性。</li><li>通过 <code>for (variable in object) {...}</code> 遍历对象可枚举属性（自身属性与继承属性）。 </li></ul></li><li><p><code>get</code> : 该元属性只能取值为 <code>undefined</code> 或者 <code>function</code> 类型。</p><ul><li>get 元属性值为 <code>undefined</code> 类型时，对象属性的取值操作返回值都是 <code>undefined</code>。</li><li>get 元属性值为 <code>function</code> 类型时，对象属性的取值操作返回值是该函数的返回值。</li></ul></li><li><p><code>set</code> : 该元属性只能取值 <code>undefined</code> 或者 <code>function</code> 类型。</p><ul><li>set 元属性值为 <code>undefined</code> 类型时，对象属性赋值操作等于无效，严格模式下会抛异常。</li><li>set 元属性值为 <code>function</code> 类型时， 对象属性的赋值操作会调用该元属性函数。</li></ul></li></ol><h4 id="2-4-为属性定义存取描述符"><a href="#2-4-为属性定义存取描述符" class="headerlink" title="2.4. 为属性定义存取描述符"></a>2.4. 为属性定义存取描述符</h4><p>存取描述符只能通过接口 <code>Object.defineProperty(obj, prop, descriptor)</code> 定义及修改。<br>在定义存取描述符时可以指定少量的元属性，其余的存取描述符元属性将会采用默认值，存取描述符的元属性默认值如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  <span class="keyword">set</span> : undefined,</span><br><span class="line">  <span class="keyword">get</span> : undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用接口 <code>Object.defineProperty(obj, prop, descriptor)</code> 定义存取描述符的示例如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为 o.a 定义存取描述符，使得 o._a 与 o.a 保持数据同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">o._a = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 o.a 定义存取描述符，configurable和enumerable采用默认值</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'a'</span>, &#123;</span><br><span class="line">  <span class="keyword">get</span> : function() &#123;</span><br><span class="line">    <span class="keyword">return</span> o._a;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> : function(val) &#123;</span><br><span class="line">    o._a = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">'a'</span>);  <span class="comment">// &#123;</span></span><br><span class="line">                                          <span class="comment">//   configurable: false,</span></span><br><span class="line">                                          <span class="comment">//   enumerable: false,</span></span><br><span class="line">                                          <span class="comment">//   get: [Function: get],</span></span><br><span class="line">                                          <span class="comment">//   set: [Function: set]</span></span><br><span class="line">                                          <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">o.a = <span class="number">1</span>;  <span class="comment">// o.a = 1, o._a = 1</span></span><br><span class="line">o.a;   <span class="comment">// 1</span></span><br><span class="line">o._a;  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>使用接口 <code>Object.defineProperty(obj, prop, descriptor)</code> 修改存取描述符的示例如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为 o.a 定义存取描述符，使得 o._a 与 o.a 保持数据同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">o._a = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 o.a 定义存取描述符</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'a'</span>, &#123;</span><br><span class="line">  configurable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">get</span> : function() &#123;</span><br><span class="line">    <span class="keyword">return</span> o._a;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> : function(val) &#123;</span><br><span class="line">    o._a = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">'a'</span>);  <span class="comment">// &#123;</span></span><br><span class="line">                                          <span class="comment">//   configurable: true,</span></span><br><span class="line">                                          <span class="comment">//   enumerable: true,</span></span><br><span class="line">                                          <span class="comment">//   get: [Function: get],</span></span><br><span class="line">                                          <span class="comment">//   set: [Function: set]</span></span><br><span class="line">                                          <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">o.a = <span class="number">1</span>;  <span class="comment">// o.a = 1, o._a = 1</span></span><br><span class="line">o.a;   <span class="comment">// 1</span></span><br><span class="line">o._a;  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 o.a 存取描述符， 使其变为不可枚举属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'a'</span>, &#123;</span><br><span class="line">  enumerable : <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o , <span class="string">'a'</span>); <span class="comment">// &#123;</span></span><br><span class="line">                                          <span class="comment">//   configurable: true,</span></span><br><span class="line">                                          <span class="comment">//   enumerable: false,</span></span><br><span class="line">                                          <span class="comment">//   get: [Function: get],</span></span><br><span class="line">                                          <span class="comment">//   set: [Function: set]</span></span><br><span class="line">                                          <span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-数据描述符与存取描述符的异同"><a href="#3-数据描述符与存取描述符的异同" class="headerlink" title="3. 数据描述符与存取描述符的异同"></a>3. 数据描述符与存取描述符的异同</h3><ul><li>数据描述符和存取描述符都具有元属性 <code>configurable</code> 和 <code>enumerable</code>, 且这两个元属性在数据描述符和存取描述符中的含义一致。</li><li>数据描述符的元属性集合只能是 [<code>configurable</code>， <code>enumerable</code>， <code>value</code>， <code>writable</code>]。</li><li>存取描述符的元属性集合只能是 [<code>configurable</code>， <code>enumerable</code>，<code>set</code>， <code>get</code>]。</li></ul><h3 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" target="_blank" rel="noopener">Object​.get​OwnProperty​Descriptor()</a>;</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors" target="_blank" rel="noopener">Object​.get​OwnProperty​Descriptors()</a>;</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object​.define​Property()</a>;</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object​.keys()</a>;</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values" target="_blank" rel="noopener">Object​.values()</a>;</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener">Object​.entries()</a>;</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noopener">for…in</a>;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-属性描述符简介&quot;&gt;&lt;a href=&quot;#1-属性描述符简介&quot; class=&quot;headerlink&quot; title=&quot;1. 属性描述符简介&quot;&gt;&lt;/a&gt;1. 属性描述符简介&lt;/h3&gt;&lt;h4 id=&quot;1-1-什么是属性描述符&quot;&gt;&lt;a href=&quot;#1-1-什么是属性描述
      
    
    </summary>
    
      <category term="2019" scheme="http://www.shifeiqi.top/categories/2019/"/>
    
    
      <category term="ECMA" scheme="http://www.shifeiqi.top/tags/ECMA/"/>
    
      <category term="ECMAScript" scheme="http://www.shifeiqi.top/tags/ECMAScript/"/>
    
      <category term="JavaScript" scheme="http://www.shifeiqi.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>选择排序</title>
    <link href="http://www.shifeiqi.top/2019/03/11/2019-03-11-select-sort/"/>
    <id>http://www.shifeiqi.top/2019/03/11/2019-03-11-select-sort/</id>
    <published>2019-03-11T11:33:00.000Z</published>
    <updated>2019-05-10T11:40:57.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🍎原理"><a href="#🍎原理" class="headerlink" title="🍎原理"></a>🍎原理</h3><p>将待排序序列划分为 <code>已排序序列</code> 和 <code>未排序序列</code>，对 <code>待排序序列</code> 进行 N - 1 次遍历排序，每次遍历排序的过程如下：</p><ol><li>从 <code>未排序序列</code> 中选择一个最小值 min。</li><li>将最小值插 min 入到 <code>已排序序列</code> 队尾，<code>已排序序列</code>长度加1， <code>未排序序列</code>长度减1。</li></ol><h4 id="时间复杂度-O-n-2"><a href="#时间复杂度-O-n-2" class="headerlink" title="时间复杂度: O(n^2)"></a>时间复杂度: O(n^2)</h4><h4 id="稳定排序算法"><a href="#稳定排序算法" class="headerlink" title="稳定排序算法"></a>稳定排序算法</h4><h3 id="🍊示例"><a href="#🍊示例" class="headerlink" title="🍊示例"></a>🍊示例</h3><p>以下示例对序列 [3, 2, 5, 7, 4, 1, 9, 8, 6] 进行排序过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">0x00 从未排序队列中 [3, 2, 5, 7, 4, 1, 9, 8, 6] 选择最小值 1 加入到已排序队列 [] 中</span><br><span class="line">    </span><br><span class="line">    [已排序][未排序-------------------]</span><br><span class="line">            [3, 2, 5, 7, 4, 1, 9, 8, 6]</span><br><span class="line">                           ^min</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x01 从未排序队列[3, 2, 5, 7, 4, 9, 8, 6]中选择最小值 2 加入到已排序队列 [1] 中</span><br><span class="line">    </span><br><span class="line">    [已排序---][未排序----------------]</span><br><span class="line">           [1, 3, 2, 5, 7, 4, 9, 8, 6]</span><br><span class="line">                  ^min</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x02 从未排序队列[3, 5, 7, 4, 9, 8, 6]中选择最小值 3 加入到已排序队列 [1,2] 中</span><br><span class="line"></span><br><span class="line">    [已排序------][未排序-------------]</span><br><span class="line">           [1, 2, 3, 5, 7, 4, 9, 8, 6]</span><br><span class="line">                  ^min</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x03 从未排序队列[5, 7, 4, 9, 8, 6]中选择最小值 4 加入到已排序队列 [1,2,3] 中</span><br><span class="line"></span><br><span class="line">    [已排序---------][未排序----------]</span><br><span class="line">           [1, 2, 3, 5, 7, 4, 9, 8, 6]</span><br><span class="line">                           ^min</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x04 从未排序队列[7, 5, 9, 8, 6]中选择最小值 5 加入到已排序队列 [1,2,3,4] 中</span><br><span class="line"></span><br><span class="line">    [已排序-----------][未排序-------]</span><br><span class="line">          [1, 2, 3, 4, 7, 5, 9, 8, 6]</span><br><span class="line">                          ^min</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x05 从未排序队列中[7, 9, 8, 6]选择最小值 6 加入到已排序队列 [1,2,3,4,5] 中</span><br><span class="line"></span><br><span class="line">    [已排序--------------][未排序----]</span><br><span class="line">          [1, 2, 3, 4, 5, 7, 9, 8, 6]</span><br><span class="line">                                   ^min</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x06 从未排序队列中[9, 8, 7]选择最小值 7 加入到已排序队列 [1,2,3,4,5,6] 中</span><br><span class="line"></span><br><span class="line">    [已排序-----------------][未排序-]</span><br><span class="line">          [1, 2, 3, 4, 5, 6, 9, 8, 7]</span><br><span class="line">                                   ^min</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x07 从未排序队列[8, 9]中选择最小值 8 加入到已排序队列 [1,2,3,4,5,6,7] 中</span><br><span class="line"></span><br><span class="line">    [已排序--------------------][未排序]</span><br><span class="line">          [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">                                ^min</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x08 从未排序队列[9]中选择最小值 9 加入到已排序队列 [1,2,3,4,5,6,7,8] 中</span><br><span class="line"></span><br><span class="line">    [已排序-----------------------][未排序]</span><br><span class="line">          [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">                                   ^min</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x09 game over!</span><br><span class="line"></span><br><span class="line">    [已排序--------------------------][未排序]</span><br><span class="line">          [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure></p><h3 id="🍋实现"><a href="#🍋实现" class="headerlink" title="🍋实现"></a>🍋实现</h3><h4 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap func</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> lIndex, <span class="keyword">int</span> rIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = array[lIndex];</span><br><span class="line">    array[lIndex] = array[rIndex];</span><br><span class="line">    array[rIndex] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface: select sort</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = Arrays.copyOf(nums, nums.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[minIndex] &gt; array[j])</span><br><span class="line">                minIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        swap(array, i, minIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap</span></span><br><span class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">array, lIndex, rIndex</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tmp = array[lIndex]</span><br><span class="line">  array[lIndex] = array[rIndex]</span><br><span class="line">  array[rIndex] = tmp</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface: shell sort</span></span><br><span class="line"><span class="keyword">const</span> selectSort = <span class="function">(<span class="params">nums</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> array = nums.map(<span class="function"><span class="params">e</span> =&gt;</span> e)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> minIndex = i</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(array[minIndex] &gt; array[j])</span><br><span class="line">        minIndex = j</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    swap(array, i, minIndex)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">123</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">62</span>,<span class="number">2</span>,<span class="number">67</span>,<span class="number">234</span>,<span class="number">234</span>,<span class="number">234</span>,<span class="number">12</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">const</span> ret = selectSort(nums)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ret'</span>, ret)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;🍎原理&quot;&gt;&lt;a href=&quot;#🍎原理&quot; class=&quot;headerlink&quot; title=&quot;🍎原理&quot;&gt;&lt;/a&gt;🍎原理&lt;/h3&gt;&lt;p&gt;将待排序序列划分为 &lt;code&gt;已排序序列&lt;/code&gt; 和 &lt;code&gt;未排序序列&lt;/code&gt;，对 &lt;code&gt;待排序序
      
    
    </summary>
    
      <category term="2019" scheme="http://www.shifeiqi.top/categories/2019/"/>
    
    
      <category term="算法" scheme="http://www.shifeiqi.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://www.shifeiqi.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>希尔排序</title>
    <link href="http://www.shifeiqi.top/2019/03/07/2019-03-07-shell-sort/"/>
    <id>http://www.shifeiqi.top/2019/03/07/2019-03-07-shell-sort/</id>
    <published>2019-03-07T14:04:00.000Z</published>
    <updated>2019-03-07T14:13:29.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🌍原理"><a href="#🌍原理" class="headerlink" title="🌍原理"></a>🌍原理</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>希尔排序在直接插入排序上提出了增量 d 的概念，希尔排序过程如下：</p><ol><li><p>把序列分为 d 个组，下标相距为 d 的倍数的元素放到同一个组中（d一般初始值为序列长度的一半）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对于队列 [1, 6, 2, 3, 7, 5, 9, 8, 4], 设增量 d = 3, 则分组情况如下：</span><br><span class="line"></span><br><span class="line">      [1,   6,   2,   3,   7,   5,   9,   8,   4]</span><br><span class="line">       1组  2组  3组  1组  2组   3组  1组  2组  3组</span><br><span class="line"></span><br><span class="line">即上述序列分成 3 个组：[1,3,9], [6,7,8], [2,5,4]</span><br></pre></td></tr></table></figure></li><li><p>对所有的分组进行直接插入排序。</p></li><li>d = d / 2，执行第 1 步，直到 d = 0。</li></ol><h4 id="时间复杂度-n-1-3"><a href="#时间复杂度-n-1-3" class="headerlink" title="时间复杂度(n^1.3)"></a>时间复杂度(n^1.3)</h4><h4 id="不稳定排序算法"><a href="#不稳定排序算法" class="headerlink" title="不稳定排序算法"></a>不稳定排序算法</h4><h3 id="🌎示例"><a href="#🌎示例" class="headerlink" title="🌎示例"></a>🌎示例</h3><p>以下示例对队列 [1, 6, 2, 3, 7, 5, 9, 8, 4] 进行希尔排序过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">0x00 增量 d = 9 / 2 = 4, 分组情况如下：</span><br><span class="line">        [1,   6,   2,   3,   7,   5,   9,   8,   4]</span><br><span class="line">         1组  2组  3组  4组  1组  2组   3组  4组  1组</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x01 增量 d = 4, 对个分组进行直接插入排序。</span><br><span class="line">        [1,   5,   2,   3,   4,   6,   9,   8,   7]</span><br><span class="line">         1组  2组  3组  4组  1组  2组   3组  4组  1组</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x03 增量 d = d / 2 = 4 / 2 = 2, 分组情况如下：</span><br><span class="line">        [1,   5,   2,   3,   4,   6,   9,   8,   7]</span><br><span class="line">         1组  2组  1组  2组  1组   2组  1组  2组  1组</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x04 增量 d = 2，对各分组进行直接插入排序。</span><br><span class="line">        [1,   3,   2,   5,   4,   6,   7,   8,   9]</span><br><span class="line">         1组  2组  1组  2组  1组   2组  1组  2组  1组</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x05 增量 d = d / 2 = 2 / 2 = 1, 分组情况如下：</span><br><span class="line">        [1,   3,   2,   5,   4,   6,   7,   8,   9]  </span><br><span class="line">         1组  1组  1组  1组  1组  1组   1组  1组  1组</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x06 增量 d = 1, 对个分组进行直接插入排序。</span><br><span class="line">        [1,   2,   3,   4,   5,   6,   7,   8,   9]       </span><br><span class="line">         1组  1组  1组  1组  1组  1组   1组  1组  1组</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x07 增量 d = d / 2 = 1 / 2 = 0, 结束排序。</span><br><span class="line">        [1,   2,   3,   4,   5,   6,   7,   8,   9]</span><br></pre></td></tr></table></figure></p><h3 id="🌏实现"><a href="#🌏实现" class="headerlink" title="🌏实现"></a>🌏实现</h3><h4 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap func</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> lIndex, <span class="keyword">int</span> rIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = array[lIndex];</span><br><span class="line">    array[lIndex] = array[rIndex];</span><br><span class="line">    array[rIndex] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface: shell sort</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = Arrays.copyOf(nums, nums.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d = array.length / <span class="number">2</span>; d &gt; <span class="number">0</span>; d /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;  i &lt; array.length; i += d) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j -= d) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[j - d] &gt; array[j])</span><br><span class="line">                    swap(array, j - d, j);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap</span></span><br><span class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">array, lIndex, rIndex</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tmp = array[lIndex]</span><br><span class="line">  array[lIndex] = array[rIndex]</span><br><span class="line">  array[rIndex] = tmp</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface: shell sort</span></span><br><span class="line"><span class="keyword">const</span> shellSort = <span class="function">(<span class="params">nums</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> array = nums.map(<span class="function"><span class="params">e</span> =&gt;</span> e)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> d = <span class="built_in">Math</span>.floor(array.length / <span class="number">2</span>); d &gt; <span class="number">0</span>; d = <span class="built_in">Math</span>.floor(d / <span class="number">2</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i ++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> j = i; j &gt; d - <span class="number">1</span>; j -= d) &#123;</span><br><span class="line">        <span class="keyword">if</span>(array[j - d] &gt; array[j])</span><br><span class="line">          swap(array, j - d, j)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">123</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">62</span>,<span class="number">2</span>,<span class="number">67</span>,<span class="number">234</span>,<span class="number">234</span>,<span class="number">234</span>,<span class="number">12</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">const</span> ret = shellSort(nums)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ret'</span>, ret)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;🌍原理&quot;&gt;&lt;a href=&quot;#🌍原理&quot; class=&quot;headerlink&quot; title=&quot;🌍原理&quot;&gt;&lt;/a&gt;🌍原理&lt;/h3&gt;&lt;h4 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="2019" scheme="http://www.shifeiqi.top/categories/2019/"/>
    
    
      <category term="算法" scheme="http://www.shifeiqi.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://www.shifeiqi.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>直接插入排序</title>
    <link href="http://www.shifeiqi.top/2019/03/06/2019-03-06-insert-sort/"/>
    <id>http://www.shifeiqi.top/2019/03/06/2019-03-06-insert-sort/</id>
    <published>2019-03-06T12:24:00.000Z</published>
    <updated>2019-03-06T12:26:58.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🌒原理"><a href="#🌒原理" class="headerlink" title="🌒原理"></a>🌒原理</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>将序列分为两部分：<code>已排序序列</code>和<code>未排序序列</code>,每次遍历队列都会做以下操作：</p><ol><li>从<code>未排序队列</code>中取一个值(一般取队列头元素或尾元素)。</li><li>将取到的值插入到<code>已排序队列</code>的正确位置。</li></ol><h4 id="时间复杂度-O-n-2"><a href="#时间复杂度-O-n-2" class="headerlink" title="时间复杂度: O(n^2)"></a>时间复杂度: <code>O(n^2)</code></h4><h4 id="稳定性排序算法"><a href="#稳定性排序算法" class="headerlink" title="稳定性排序算法"></a>稳定性排序算法</h4><h3 id="🌓示例"><a href="#🌓示例" class="headerlink" title="🌓示例"></a>🌓示例</h3><p>以下模拟对 <code>[3, 2, 5, 7, 1, 8, 9, 4, 6]</code> 进行插入排序过程:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">0x00  选取3插入到已排序队列中</span><br><span class="line">    [已排序][未排序--------------------]</span><br><span class="line">            [3, 2, 5, 7, 1, 8, 9, 4, 6]</span><br><span class="line">             ^</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x01  选取2插入到已排序队列中</span><br><span class="line">        [已排序][未排序----------------]</span><br><span class="line">            [3, 2, 5, 7, 1, 8, 9, 4, 6]</span><br><span class="line">                ^</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x02  选取5插入到已排序队列中</span><br><span class="line">           [已排序][未排序-------------]</span><br><span class="line">            [2, 3, 5, 7, 1, 8, 9, 4, 6]</span><br><span class="line">                   ^</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x03  选取7插入到已排序队列中</span><br><span class="line">            [已排序--][未排序----------]</span><br><span class="line">            [2, 3, 5, 7, 1, 8, 9, 4, 6]</span><br><span class="line">                      ^</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x04  选取1插入到已排序队列中</span><br><span class="line">            [已排序-----][未排序-------]</span><br><span class="line">            [2, 3, 5, 7, 1, 8, 9, 4, 6]</span><br><span class="line">                         ^</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x05  选取8插入到已排序队列中</span><br><span class="line">            [已排序--------][未排序----]</span><br><span class="line">            [1, 2, 3, 5, 7, 8, 9, 4, 6]</span><br><span class="line">                            ^</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x06  选取9插入到已排序队列中</span><br><span class="line">           [已排序-----------][未排序-]</span><br><span class="line">           [1, 2, 3, 5, 7, 8, 9, 4, 6]</span><br><span class="line">                              ^</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x07  选取4插入到已排序队列中</span><br><span class="line">           [已排序--------------][未排序]</span><br><span class="line">           [1, 2, 3, 5, 7, 8, 9, 4, 6]</span><br><span class="line">                                 ^</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x08  选取6插入到已排序队列中</span><br><span class="line">           [已排序--------------][未排序]</span><br><span class="line">           [1, 2, 3, 4, 5, 7, 8, 9, 6]</span><br><span class="line">                                    ^</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">0x09  排序完成</span><br><span class="line">           [已排序------------------ -][未排序]</span><br><span class="line">           [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure></p><h3 id="🌔实现"><a href="#🌔实现" class="headerlink" title="🌔实现"></a>🌔实现</h3><h4 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//swap func</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> lIndex, <span class="keyword">int</span> rIndex)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> tmp = array[lIndex];</span><br><span class="line">      array[lIndex] = array[rIndex];</span><br><span class="line">      array[rIndex] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// interface: insert sort func</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">      <span class="keyword">int</span>[] array = Arrays.copyOf(nums, nums.length);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">              <span class="keyword">if</span>(array[j - <span class="number">1</span>] &gt;  array[j])</span><br><span class="line">                  swap(array, j - <span class="number">1</span>, j);</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap</span></span><br><span class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">array, lIndex, rIndex</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tmp = array[lIndex]</span><br><span class="line">  array[lIndex] = array[rIndex]</span><br><span class="line">  array[rIndex] = tmp</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface: insert sort</span></span><br><span class="line"><span class="keyword">const</span> insertSort = <span class="function">(<span class="params">nums</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> array = nums.map(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span>(array[j - <span class="number">1</span>] &gt; array[j])</span><br><span class="line">        swap(array, j - <span class="number">1</span>, j)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">123</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">62</span>,<span class="number">2</span>,<span class="number">67</span>,<span class="number">234</span>,<span class="number">234</span>,<span class="number">234</span>,<span class="number">12</span>]</span><br><span class="line"><span class="keyword">const</span> ret = insertSort(nums)</span><br><span class="line"><span class="built_in">console</span>.log(ret)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;🌒原理&quot;&gt;&lt;a href=&quot;#🌒原理&quot; class=&quot;headerlink&quot; title=&quot;🌒原理&quot;&gt;&lt;/a&gt;🌒原理&lt;/h3&gt;&lt;h4 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="2019" scheme="http://www.shifeiqi.top/categories/2019/"/>
    
    
      <category term="算法" scheme="http://www.shifeiqi.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://www.shifeiqi.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://www.shifeiqi.top/2019/03/05/2019-03-05-quick-sort/"/>
    <id>http://www.shifeiqi.top/2019/03/05/2019-03-05-quick-sort/</id>
    <published>2019-03-05T11:24:00.000Z</published>
    <updated>2019-03-05T11:48:27.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🐶-原理"><a href="#🐶-原理" class="headerlink" title="🐶 原理"></a>🐶 原理</h3><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>  快速排序属于交换排序的一种，采用<code>分治</code>的思想， 步骤如下：  </p><ol><li><code>基准&lt;pivot&gt;</code>选取: 从待排序序列中挑出一个元素，称之为”基准元素”(pivot)，一般选择队列中第一个元素或者最后一个元素。</li><li><code>分割&lt;partition&gt;</code>操作：把所有比基准元素小的元素交换到基准元素前面，所有比基准元素大的元素交换到基准元素后面。</li><li>在 由基准元素分割得到的两个子队列 上分别执行第1步操作。</li></ol><h4 id="时间复杂度-O-nlogn"><a href="#时间复杂度-O-nlogn" class="headerlink" title="时间复杂度: O(nlogn)"></a>时间复杂度: <code>O(nlogn)</code></h4><h4 id="不稳定"><a href="#不稳定" class="headerlink" title="不稳定"></a>不稳定</h4><h3 id="🐰-示例"><a href="#🐰-示例" class="headerlink" title="🐰 示例"></a>🐰 示例</h3><p>以下示例模拟对 [1, 6, 2, 8, 4, 3, 7, 9, 5] 进行快速排序过程, 基准<pivot>选择序列的最后一个元素.</pivot></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x00</span></span><br><span class="line">       [<span class="number">1</span>,  <span class="number">6</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">4</span>,  <span class="number">3</span>,  <span class="number">7</span>,  <span class="number">9</span>,  <span class="number">5</span>]</span><br><span class="line">                                        ^pivot</span><br><span class="line"></span><br><span class="line">                                  <span class="comment">// 队列[1,6,2,8,4,3,7,9,5]选取基准5,进行第一次递归分割</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">0x01</span></span><br><span class="line">       [----比<span class="number">5</span>小-----]          [----比<span class="number">5</span>大-----]</span><br><span class="line">       [<span class="number">1</span>,  <span class="number">3</span>,  <span class="number">2</span>,  <span class="number">4</span>,    &lt;<span class="number">5</span>&gt;,    <span class="number">8</span>,  <span class="number">7</span>,  <span class="number">9</span>,  <span class="number">6</span>]  </span><br><span class="line"></span><br><span class="line">                                 <span class="comment">// 第一次递归分割结束,获得两个子队列</span></span><br><span class="line">                                 <span class="comment">// 队列[1,6,2,8,4,3,7,9,5]被基准5分割为[1,3,2,4]和[8,7,9,6]</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">0x10</span></span><br><span class="line">       [             ]           [             ]</span><br><span class="line">       [<span class="number">1</span>,  <span class="number">3</span>,  <span class="number">2</span>,  <span class="number">4</span>,    &lt;<span class="number">5</span>&gt;,    <span class="number">8</span>,  <span class="number">7</span>,  <span class="number">9</span>,  <span class="number">6</span>]</span><br><span class="line">                    ^pivot                    ^pivot</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 对待分割子队列[1,3,2,4]选取基准4,进入第二次递归分割,</span></span><br><span class="line">                                <span class="comment">// 对待分割子队列[8,7,9,6]选取基准6,进入第二次递归分割</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">0x11</span></span><br><span class="line">       [--比<span class="number">4</span>小--]       []      []      [--比<span class="number">6</span>大---]</span><br><span class="line">       [<span class="number">1</span>,  <span class="number">3</span>,  <span class="number">2</span>,  &lt;<span class="number">4</span>&gt;,    &lt;<span class="number">5</span>&gt;,    &lt;<span class="number">6</span>&gt;,  <span class="number">7</span>,  <span class="number">9</span>,  <span class="number">8</span>]</span><br><span class="line">                                <span class="comment">// 第二次递归分割结束,获得四个子队列</span></span><br><span class="line">                                <span class="comment">// [1,3,2,4]被4分割为 [1,3,2] 和 []</span></span><br><span class="line">                                <span class="comment">// [8,7,9,6]被6分割为 [] 和 [7,9,6]</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">0x20</span></span><br><span class="line">       [          ]       []      []      [         ]</span><br><span class="line">       [<span class="number">1</span>,  <span class="number">3</span>,  <span class="number">2</span>,   &lt;<span class="number">4</span>&gt;,    &lt;<span class="number">5</span>&gt;,    &lt;<span class="number">6</span>&gt;,  <span class="number">7</span>,  <span class="number">9</span>,  <span class="number">8</span>]</span><br><span class="line">                ^pivot                             ^pivot</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 子队列[1,3,2]选取基准2,进入第三次递归分割</span></span><br><span class="line">                                <span class="comment">// 子队列[7,9,8]选取基准8,进入第三次递归分割</span></span><br><span class="line">                                <span class="comment">// []不做处理</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">0x21</span></span><br><span class="line">       [-]       [-]                        [-]       [-]</span><br><span class="line">       [<span class="number">1</span>,  &lt;<span class="number">2</span>&gt;,  <span class="number">3</span>,   &lt;<span class="number">4</span>&gt;,    &lt;<span class="number">5</span>&gt;,    &lt;<span class="number">6</span>&gt;,  <span class="number">7</span>,  &lt;<span class="number">8</span>&gt;,  <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 第三次递归分割结束,获取4个子队列</span></span><br><span class="line">                                <span class="comment">// [1,3,2]被3分割为[1]和[3]</span></span><br><span class="line">                                <span class="comment">// [7,9,8]被8分割为[7]和[9]</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">0x30</span>      </span><br><span class="line">      [-]       [-]                        [-]       [-]</span><br><span class="line">      [<span class="number">1</span>,  &lt;<span class="number">2</span>&gt;,  <span class="number">3</span>,   &lt;<span class="number">4</span>&gt;,    &lt;<span class="number">5</span>&gt;,    &lt;<span class="number">6</span>&gt;,  <span class="number">7</span>,  &lt;<span class="number">8</span>&gt;,  <span class="number">9</span>]</span><br><span class="line">       ^pivot    ^pivot                     ^pivot    ^pivot</span><br><span class="line"></span><br><span class="line">                               <span class="comment">// 子队列[1] [3] [7] [9] 都只包含一个基准元素,直接返回.</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">0x31</span></span><br><span class="line">      [&lt;<span class="number">1</span>&gt;,  &lt;<span class="number">2</span>&gt;,  &lt;<span class="number">3</span>&gt;,   &lt;<span class="number">4</span>&gt;,  &lt;<span class="number">5</span>&gt;,  &lt;<span class="number">6</span>&gt;,  &lt;<span class="number">7</span>&gt;,  &lt;<span class="number">8</span>&gt;,  &lt;<span class="number">9</span>&gt;]</span><br><span class="line"></span><br><span class="line">                               <span class="comment">// 获得排好队列</span></span><br></pre></td></tr></table></figure><h3 id="🐗-实现"><a href="#🐗-实现" class="headerlink" title="🐗 实现"></a>🐗 实现</h3><h4 id="Java-递归实现"><a href="#Java-递归实现" class="headerlink" title="Java 递归实现"></a>Java 递归实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap func</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> lIndex, <span class="keyword">int</span> rIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = array[lIndex];</span><br><span class="line">    array[lIndex] = array[rIndex];</span><br><span class="line">    array[rIndex] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// partition func</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 选取基准</span></span><br><span class="line">    <span class="keyword">int</span> pivot = array[right];</span><br><span class="line">    <span class="keyword">int</span> sIndex = right;</span><br><span class="line">    <span class="comment">// 分割</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">while</span>(array[left] &lt;= pivot &amp;&amp; left &lt; right)</span><br><span class="line">            left ++;</span><br><span class="line">        swap(array, left, sIndex);</span><br><span class="line">        sIndex = left;</span><br><span class="line">        <span class="comment">// --</span></span><br><span class="line">        <span class="keyword">while</span>(array[right] &gt;= pivot &amp;&amp; left &lt; right)</span><br><span class="line">            right --;</span><br><span class="line">        swap(array, sIndex, right);</span><br><span class="line">        sIndex = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// quick sort, recursively func</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> parIndex = partition(array, left, right);</span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    quickSort(array, left, parIndex - <span class="number">1</span>);</span><br><span class="line">    quickSort(array, parIndex + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sort interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = Arrays.copyOf(nums, nums.length);</span><br><span class="line">    quickSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-递归实现"><a href="#JavaScript-递归实现" class="headerlink" title="JavaScript 递归实现"></a>JavaScript 递归实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap func</span></span><br><span class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">array, lIndex, rIndex</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tmp = array[lIndex];</span><br><span class="line">  array[lIndex] = array[rIndex];</span><br><span class="line">  array[rIndex] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// partition func</span></span><br><span class="line"><span class="keyword">const</span> partition = <span class="function">(<span class="params">array, left, right</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 选择基准</span></span><br><span class="line">  <span class="keyword">const</span> pivot = array[right];</span><br><span class="line">  <span class="keyword">let</span> sIndex = right;</span><br><span class="line">  <span class="comment">// 分割</span></span><br><span class="line">  <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">while</span>(array[left] &lt;= pivot &amp;&amp; left &lt; right)</span><br><span class="line">      left++;</span><br><span class="line">    swap(array, left, sIndex);</span><br><span class="line">    sIndex = left;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">while</span>(array[right] &gt;= pivot &amp;&amp; left &lt; right)</span><br><span class="line">      right--;</span><br><span class="line">    swap(array, sIndex, right);</span><br><span class="line">    sIndex = right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// quick sort, recursively func</span></span><br><span class="line"><span class="keyword">const</span> quickSort = <span class="function">(<span class="params">array, left, right</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(left &gt;= right)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> parIndex = partition(array, left, right);</span><br><span class="line">  quickSort(array, left, parIndex - <span class="number">1</span>);</span><br><span class="line">  quickSort(array, parIndex + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sort interface func</span></span><br><span class="line"><span class="keyword">const</span> sort = <span class="function">(<span class="params">nums</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> array = nums.slice();</span><br><span class="line">  quickSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;🐶-原理&quot;&gt;&lt;a href=&quot;#🐶-原理&quot; class=&quot;headerlink&quot; title=&quot;🐶 原理&quot;&gt;&lt;/a&gt;🐶 原理&lt;/h3&gt;&lt;h4 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;
      
    
    </summary>
    
      <category term="2019" scheme="http://www.shifeiqi.top/categories/2019/"/>
    
    
      <category term="算法" scheme="http://www.shifeiqi.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://www.shifeiqi.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="http://www.shifeiqi.top/2019/02/11/2019-02-11-bubble-sort/"/>
    <id>http://www.shifeiqi.top/2019/02/11/2019-02-11-bubble-sort/</id>
    <published>2019-02-11T07:58:00.000Z</published>
    <updated>2019-03-06T12:23:27.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="💣-原理"><a href="#💣-原理" class="headerlink" title="💣 原理"></a>💣 原理</h3><h4 id="冒泡排序基本思想："><a href="#冒泡排序基本思想：" class="headerlink" title="冒泡排序基本思想："></a>冒泡排序基本思想：</h4><ol><li>将待排序队列分为<code>未排序子队列</code>（位于左侧，初始值为待排序队列）和<code>已排序子队列</code>（位于右侧，初始值为空）。</li><li>走访<code>未排序子队列</code>，选择<code>未排序子队列</code>中的最大值交换到<code>未排序子队列</code>的列尾。</li><li><code>未排序子队列</code>长度减一， <code>已排序子队列</code>长度加一。</li><li><code>未排序子队列</code>长度 == 0 ?  排序结束 ：  重复第2步。  </li></ol><h4 id="时间复杂度：O-n-2-。"><a href="#时间复杂度：O-n-2-。" class="headerlink" title="时间复杂度：O(n^2)。"></a>时间复杂度：<code>O(n^2)。</code></h4><h4 id="稳定性排序算法。"><a href="#稳定性排序算法。" class="headerlink" title="稳定性排序算法。"></a>稳定性排序算法。</h4><h3 id="🔫-示例"><a href="#🔫-示例" class="headerlink" title="🔫 示例"></a>🔫 示例</h3><p>  以下是对队列 <code>[4, 2, 3, 6, 8, 1, 5]</code> 进行冒泡排序的模拟过程（注：算法抽象过程描述，非程序运行过程）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>     [<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">5</span> ]</span><br><span class="line">      [    未排序子队列     ] [已排序子队列]    <span class="comment">// 将待排序队列分为 [未排序子队列] 和 [已排序子队列]</span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">1</span>     [<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>,    <span class="number">1</span>, <span class="number">5</span>,   <span class="number">8</span>]</span><br><span class="line">      [    未排序子队列     ] [已排序子队列]    <span class="comment">//第1次走访，</span></span><br><span class="line">                                              <span class="comment">//选取当前未排序子队列中最大值8冒泡到最后</span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">2</span>     [<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>,       <span class="number">1</span>, <span class="number">5</span>,   <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">      [    未排序子队列     ] [已排序子队列]    <span class="comment">//第2次走访，</span></span><br><span class="line">                                              <span class="comment">//选取当前未排序子队列中最大值6冒泡到最后</span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">3</span>     [<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>,       <span class="number">1</span>,      <span class="number">5</span>,  <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">      [    未排序子队列     ] [已排序子队列]    <span class="comment">//第3次走访，</span></span><br><span class="line">                                              <span class="comment">//选取当前未排序子队列中最大值5冒泡到最后</span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">4</span>     [   <span class="number">2</span>, <span class="number">3</span>,       <span class="number">1</span>,      <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">      [    未排序子队列     ] [已排序子队列]    <span class="comment">//第4次走访，</span></span><br><span class="line">                                              <span class="comment">//选取当前未排序子队列中最大值4冒泡到最后</span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">5</span>     [   <span class="number">2</span>,          <span class="number">1</span>,      <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">      [    未排序子队列     ] [已排序子队列]    <span class="comment">//第5次走访，</span></span><br><span class="line">                                              <span class="comment">//选取当前未排序子队列中最大值3冒泡到最后</span></span><br><span class="line">------------------------------------------------------------------------------------                                              </span><br><span class="line"><span class="number">6</span>     [               <span class="number">1</span>,      <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">      [    未排序子队列     ] [已排序子队列]    <span class="comment">//第6次走访，</span></span><br><span class="line">                                              <span class="comment">//选取当前未排序子队列中最大值2冒泡到最后</span></span><br><span class="line">------------------------------------------------------------------------------------                                              </span><br><span class="line"><span class="number">7</span>     [                       <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">      [    未排序子队列     ] [已排序子队列]    <span class="comment">//第7次走访，</span></span><br><span class="line">                                              <span class="comment">//选取当前未排序子队列中最大值1冒泡到最后</span></span><br></pre></td></tr></table></figure></p><h3 id="🔪-算法实现"><a href="#🔪-算法实现" class="headerlink" title="🔪 算法实现"></a>🔪 算法实现</h3><h4 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> lIndex, <span class="keyword">int</span> rIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = array[lIndex];</span><br><span class="line">    array[lIndex] = array[rIndex];</span><br><span class="line">    array[rIndex] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sort interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = Arrays.copyOf(nums, nums.length);</span><br><span class="line">    <span class="comment">// bubble sort</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>])</span><br><span class="line">                swap(array, j, j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap</span></span><br><span class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">array, lIndex, rIndex</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = array[lIndex];</span><br><span class="line">    array[lIndex] = array[rIndex];</span><br><span class="line">    array[rIndex] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sort interface</span></span><br><span class="line"><span class="keyword">const</span> bubbleSort = <span class="function"><span class="params">nums</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> array = nums.slice();</span><br><span class="line">    <span class="comment">// bubble sort</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++)</span><br><span class="line">      <span class="keyword">if</span>(array[j] &gt; array[j + <span class="number">1</span>])</span><br><span class="line">        swap(array, j, j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;💣-原理&quot;&gt;&lt;a href=&quot;#💣-原理&quot; class=&quot;headerlink&quot; title=&quot;💣 原理&quot;&gt;&lt;/a&gt;💣 原理&lt;/h3&gt;&lt;h4 id=&quot;冒泡排序基本思想：&quot;&gt;&lt;a href=&quot;#冒泡排序基本思想：&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="2019" scheme="http://www.shifeiqi.top/categories/2019/"/>
    
    
      <category term="算法" scheme="http://www.shifeiqi.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://www.shifeiqi.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
